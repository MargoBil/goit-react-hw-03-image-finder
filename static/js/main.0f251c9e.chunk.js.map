{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Loader/Loader.js","components/Modal/Modal.js","services/imagesApi.js","components/App.js","index.js"],"names":["Searchbar","state","inputValue","hadleInput","target","setState","value","hadleSubmit","e","preventDefault","props","onSubmit","className","this","type","autoComplete","autoFocus","placeholder","onChange","Component","ImageGalleryItem","imageLink","largeImageUrl","webformatWidth","webformatHeight","data-img","src","alt","width","height","ImageGallery","images","onClick","map","webformatURL","largeImageURL","id","key","Button","handleClickBtn","Spiner","color","Modal","closeModalByKeyDown","code","window","addEventListener","removeEventListener","fetchImagesWithRequest","request","page","fetch","then","response","json","data","hits","App","error","searchRequest","loader","fetchImages","scroll","document","documentElement","offsetHeight","prevState","scrollTo","top","behavior","catch","finally","handleSubmitForm","toggleModalWindow","dataset","img","closeModalWindow","prevProps","isImagesFull","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0f251c9e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Searchbar extends Component {\r\n  state ={\r\n    inputValue : ''\r\n  }\r\n\r\n  hadleInput = ({target}) => {\r\n    this.setState({inputValue: target.value})\r\n  }\r\n\r\n  hadleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.inputValue);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form onSubmit={this.hadleSubmit} className=\"SearchForm\">\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            onChange={this.hadleInput}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\n\r\nconst ImageGalleryItem = ({imageLink, largeImageUrl, webformatWidth, webformatHeight}) => {\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img data-img={largeImageUrl} src={imageLink} alt=\"\" className=\"ImageGalleryItem-image\" width={webformatWidth} height={webformatHeight}/>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import React from 'react';\r\n\r\nimport ImageGalleryItem from './../ImageGalleryItem/ImageGalleryItem';\r\n\r\nconst ImageGallery = ({images, onClick}) => {\r\n  return (\r\n    <ul onClick={onClick}  className=\"ImageGallery\">\r\n      {images.map(({webformatURL, largeImageURL, webformatWidth, webformatHeight, id}) => <ImageGalleryItem largeImageUrl={largeImageURL} imageLink={webformatURL} webformatWidth={webformatWidth} webformatHeight={webformatHeight} key={id} />)}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ImageGallery;","import React from 'react';\r\n\r\nconst Button = ({handleClickBtn}) => {\r\n  return (\r\n    <button type=\"button\" onClick={handleClickBtn} className=\"Button\" >Load more</button>\r\n  )\r\n}\r\n\r\nexport default Button;","import Loader from 'react-loader-spinner';\r\n\r\nimport React from 'react';\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst Spiner = () => {\r\n  return (\r\n    <div className=\"Spiner\">\r\n    <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={100} width={100} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spiner;\r\n","import React, {Component} from 'react';\r\n\r\nclass Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.closeModalByKeyDown)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.closeModalByKeyDown)\r\n  }\r\n\r\n  closeModalByKeyDown = (e) => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onClick();\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const {largeImageUrl, onClick} = this.props;\r\n    return (\r\n      <div onClick={onClick} className=\"Overlay\">\r\n        <div className=\"Modal\">\r\n          <img src={largeImageUrl} alt=\"\"/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","const fetchImagesWithRequest = (request, page = 1) => {\r\n  return fetch (\r\n    `https://pixabay.com/api/?q=${request}&page=${page}&key=13157109-fcd6eded5baca4880d7f5c7a8&image_type=photo&orientation=horizontal&per_page=12`\r\n  )\r\n    .then (response => response.json ())\r\n    .then (data => data.hits);\r\n};\r\n\r\nexport default fetchImagesWithRequest;\r\n","import React, {Component} from 'react';\r\n\r\nimport Searchbar from './Searchbar/Searchbar';\r\nimport ImageGallery from './ImageGallery/ImageGallery';\r\nimport Button from './Button/Button';\r\nimport Spiner from './Loader/Loader';\r\nimport Modal from './Modal/Modal';\r\n\r\nimport fetchImagesWithRequest from './../services/imagesApi';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    images: [],\r\n    error: null,\r\n    searchRequest: '',\r\n    page: 1,\r\n    largeImageUrl: null,\r\n    loader: false\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(prevState.searchRequest !== this.state.searchRequest) {\r\n      this.fetchImages();\r\n    }\r\n  }\r\n\r\n  fetchImages = () => {\r\n    const{searchRequest, page} = this.state;\r\n    const scroll = document.documentElement.offsetHeight - 120;\r\n    this.setState({loader: true});\r\n    fetchImagesWithRequest(searchRequest, page)\r\n    .then(images => {\r\n      this.setState(prevState => ({\r\n        images: [...prevState.images, ...images],\r\n        page: prevState.page + 1,\r\n      }));\r\n      window.scrollTo({\r\n        top: scroll,\r\n        behavior: 'smooth',\r\n      });\r\n    })\r\n    .catch(error => this.setState({ error }))\r\n    .finally(()=>this.setState({loader:false}))\r\n  }\r\n\r\n  handleSubmitForm = (request) => {\r\n    this.setState({\r\n      searchRequest: request,\r\n      images: [],\r\n      page: 1\r\n    })\r\n  }\r\n\r\n  toggleModalWindow = ({target}) =>{\r\n    this.setState({\r\n      largeImageUrl: target.dataset.img\r\n    })\r\n  }\r\n\r\n  closeModalWindow = () => {\r\n    this.setState({\r\n      largeImageUrl: null,\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const{images, loader, largeImageUrl} = this.state;\r\n    const isImagesFull = images.length > 0;\r\n    return (\r\n    <>\r\n    <Searchbar onSubmit={this.handleSubmitForm}/>\r\n    {isImagesFull && <ImageGallery images={images} onClick={this.toggleModalWindow}/>}\r\n    {isImagesFull && <Button handleClickBtn={this.fetchImages}/>}\r\n    {loader && <Spiner/>}\r\n    {largeImageUrl && <Modal largeImageUrl={largeImageUrl} onClick={this.closeModalWindow}/>}\r\n    </>\r\n    )}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './styles/styles.css';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);"],"sourceRoot":""}